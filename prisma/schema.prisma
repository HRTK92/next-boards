// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  displayName   String     @default("匿名")
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Response      Response[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  status         Status     @default(public)
  tags           String[]
  atCreated      DateTime   @default(now())
  responses      Response[]
  responsesCount Int        @default(0)
  atUpdated      DateTime   @updatedAt
}

//staus
enum Status {
  public
  private
  archived
}

model Response {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  atCreated DateTime @default(now())

  Author   User    @relation(fields: [userId], references: [id])
  Thread   Thread? @relation(fields: [threadId], references: [id])
  threadId String? @db.ObjectId
  userId   String  @db.ObjectId
}
